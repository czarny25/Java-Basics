package _2;

import java.util.HashSet;
import java.util.Scanner;

public class PalindromeTester {

	public static HashSet<String> checkPermutations(String wordToCheck){		
		
		char[] wordToCheckConverted = wordToCheck.toCharArray();		
		
		HashSet<String> permutations = new HashSet<String>();
		
		String permutation = "";
		
		for(int i = 1; i <=	wordToCheck.length(); i++){
			
			for(int j = 0; j < wordToCheckConverted.length-1; j++){				
				
				System.out.println(wordToCheckConverted);
				
				char c1 = wordToCheckConverted[j];				
				char temp = wordToCheckConverted[j + 1];
				wordToCheckConverted[j + 1] = c1;
				wordToCheckConverted[j] = temp;
				
//				System.out.println(wordToCheckConverted);
				
//				StringBuilder permutationToChange = new StringBuilder();
				
//				for(int s = 0; s < wordToCheckConverted.length; s++){
//					//System.out.println(wordToCheckConverted[s]);
//					permutationToChange.append(wordToCheckConverted[s]);
//				}				
				
				
//				permutation = permutationToChange.toString();
//				System.out.println(permutation);
				
//				if(isPalindrome(permutation)){
//					permutations.add(permutation);
//					//System.out.println("is pali");
//				}
//				
//				permutation = null;
				
			}
						
		}
		
		//System.out.println(permutation);

		
		
		
		return permutations;
	}
	
	public static boolean isPalindrome(String wordToCheck){	
	
		int num = wordToCheck.length() / 2;
		
		//System.out.println(num);
		
		StringBuilder front = new StringBuilder();		
		for(int i = 0; i <	num; i++){
			char d = wordToCheck.charAt(i);
			front.append(d);			
		}
		String frontPart = front.toString();
//		System.out.print(front);		
//		System.out.println();
		
		StringBuilder reversedWordToCheck = new StringBuilder();;
		reversedWordToCheck.append(wordToCheck);		
		reversedWordToCheck.reverse();
		
		StringBuilder back = new StringBuilder();	
		for(int i = 0; i <	num; i++){
			char d = reversedWordToCheck.charAt(i);
			back.append(d);	
		}
		String backPart = back.toString();
//		System.out.print(back);
//		System.out.println();
		
		
		
		if(frontPart.equalsIgnoreCase(backPart)){
			return true;
		}else{
			return false;
		}
		
		
	}
	
	public static void main(String[] args) {

		Scanner reader = new Scanner(System.in);		
		System.out.println("Enter string to check");
		String wordToCheck = reader.next();
		
//		if(!checkPermutations(wordToCheck).isEmpty()){
			System.out.println("Palindrome generated by " + wordToCheck + " : " + checkPermutations(wordToCheck));
//		}else{
//			System.out.println("This word doesn't generate any Palindrome");
//		}
		
		
		//System.out.println(isPalindrome(wordToCheck));
		
		
		
		
	}

}
